%hr
:javascript
  var all = [];
  var active = "";
  
  function focusActive() {
    document.getElementById(active).focus()
  }

  function focusTrack(div) {
    document.getElementById(div).focus()
  }

  function loadComments(track,id) {
    var xhttp = new XMLHttpRequest();
    var div = document.getElementById("comments"+id);
    xhttp.onreadystatechange = function() {
      if (xhttp.readyState == 4 && xhttp.status == 200) {
        div.innerHTML = xhttp.responseText;
      }
    };
    xhttp.open("GET", track+".txt", true);
    xhttp.send();
  }

  function updateButton(u,id, track) {
    if (u === "#{session[:user]}"){
      var xhttp = new XMLHttpRequest();
      var button = document.getElementById("fav"+id+u);
      var icon = document.getElementById("favicon"+id+u);
      xhttp.onreadystatechange = function() {
        if (xhttp.readyState == 4 && xhttp.status == 200) {
          if (xhttp.responseText === "true"){
            button.className = "btn btn-warning";
            icon.className = "glyphicon glyphicon-ok";
          }
          if (xhttp.responseText === "false"){
            button.className = "btn btn-default";
            icon.className = "glyphicon glyphicon-ok-sign";
          }
          
        }
      };
      xhttp.open("GET", "/favs/"+u+"/"+track, true);
      xhttp.send();
    }
    return false
  }
  function updateFavs(u,id, track) {
    if (u === "#{session[:user]}"){
      $.ajax({
        type: "POST",
        url: "/update/favs/"+u,
        data: {fav: track},
      });
    }
    return false
  }

- @records.each_with_index do |record, idx|
  #div.well.well-sm{:id=>"#{record}", :tabindex=>"-1"}
    %h3{:style=>"display:block;"}
      = record
    %progress.progress{:id=>"progress#{idx}", :max=>"100", :value=>"0"}
    :javascript
      var playClicked#{idx} = false;
      var wavesurfer#{idx} = WaveSurfer.create({
          container: "#div_#{record}",
          backend: 'MediaElement',
          progressColor: 'hsla(200, 100%, 30%, 0.5)',
          cursorColor: '#fff',
          normalize: true,
          //barWidth: '3',
          pixelRatio: '1'
      });
      all.push(wavesurfer#{idx});
      wavesurfer#{idx}.on('loading', function (percents) {
        document.getElementById('progress#{idx}').value = percents;
        if (percents === 100) {
          document.getElementById('progress#{idx}').style.display = 'none'
        }
      });
      wavesurfer#{idx}.on('ready', function (percents) {
        playClicked#{idx} = true;
        wavesurfer#{idx}.play();
      });
      wavesurfer#{idx}.on('audioprocess', function () {
        time = wavesurfer#{idx}.getDuration();
        minutes = Math.floor(time / 60);
        seconds = time - minutes * 60;
        seconds = Math.floor(seconds);
        seconds = (seconds < 10) ? ("0" + seconds) : seconds;
        ctime = wavesurfer#{idx}.getCurrentTime();
        cminutes = Math.floor(ctime / 60);
        cseconds = ctime - cminutes * 60;
        cseconds = Math.floor(cseconds);
        cseconds = (cseconds < 10) ? ("0" + cseconds) : cseconds;
        div = document.getElementById("wavesurfer#{idx}time");
        active = div;
        div.innerHTML = "<i class=\"glyphicon glyphicon-time\"></i>  " + cminutes + ":" + cseconds + " - " + minutes + ":" + seconds
      });
      wavesurfer#{idx}.on("play", function() {
        $.each(all, function(index, value){
          if(value !== wavesurfer#{idx}){
            value.pause()
          }
        })
      })
      wavesurfer#{idx}.on("finish", function() {
        wavesurfer#{idx+1}.load('#{@records[idx+1]}.mp3');
        wavesurfer#{idx+1}.playPause();
        if (true !== #{@records[idx+1].nil?}) {
          focusTrack("div_#{@records[idx+1]}");
        }
      })
   
    %div.btn-group
      %button.btn.btn-default{:onclick=>"wavesurfer#{idx}.play();if (playClicked#{idx} == false){wavesurfer#{idx}.load('#{record}.mp3')};"}
        %i.glyphicon.glyphicon-play
      %button.btn.btn-default{:onclick=>"wavesurfer#{idx}.pause();"}
        %i.glyphicon.glyphicon-pause
      %a.btn.btn-default{ :href=>"#{to("/download/#{record}")}", :style=>"text-decoration:none;"}
        %i.glyphicon.glyphicon-save
      %button.btn.btn-default.disabled{:id=>"wavesurfer#{idx}time"}
        %i.glyphicon.glyphicon-time
      %a.btn.btn-default{ :href=>"#{to("/delete/#{record}")}", :style=>"text-decoration:none;"}
        %i.glyphicon.glyphicon-trash
      -#%button.btn.btn-default{:onclick=>"loadComments('#{record}', '#{idx}')", :data=>{:toggle=>"collapse", :target=>"#comments#{idx}"}}
        %span.glyphicon.glyphicon-option-horizontal
      - $users.each do |user|
        - favs = get_user_favs(user)
        %button.btn{:id=>"fav"+idx.to_s+user, :onclick=>"updateFavs('#{user}', '#{idx}', '#{record}')", :onmouseup=>"updateButton('#{user}', '#{idx}', '#{record}')", :class => [("disabled" if session[:user] != user), (favs.join(" ") =~ /\b(#{record})\b/ ? "btn-warning" : "btn-default")]}
          %span.glyphicon{:id=>"favicon"+idx.to_s+user, :class=> (favs.join(" ") =~ /\b(#{record})\b/ ? "glyphicon-ok" : "glyphicon-ok-sign")}
            = user
    %div.well.collapse{:id=> "comments#{idx}"}
    = haml :edit, :locals => {:record => "#{record}", :idx => idx}
